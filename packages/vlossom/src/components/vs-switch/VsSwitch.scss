@use '@/styles/mixin' as *;

$switchGap: 0.3rem;
$switchHeight: 3rem;
$switchHeightDense: 2rem;
$switchHandleSize: var(--vs-switch-handleSize, calc($switchHeight / 1.5));
$switchHandleSizeDense: var(--vs-switch-handleSize, calc($switchHeightDense / 1.8));

.vs-switch {
    position: relative;
    display: flex;
    align-items: center;
    min-height: var(--vs-input-comp-height);

    .vs-switch-button {
        position: relative;
        display: flex;
        align-items: center;
        width: var(--vs-switch-width, fit-content);
        height: var(--vs-switch-height, $switchHeight);
        padding: 0 0.8rem;
        border: var(--vs-switch-falseBorder, 1px solid var(--vs-line-color));
        border-radius: var(--vs-switch-borderRadius, calc($switchHeight / 2));
        background-color: var(--vs-switch-falseBackgroundColor, var(--vs-area-bg));
        color: var(--vs-switch-falseFontColor, var(--vs-font-color));
        font-size: var(--vs-switch-fontSize, var(--vs-font-size-sm));
        cursor: pointer;

        &.vs-state-box {
            @include state-box;
        }

        .vs-status-label {
            display: block;
            text-align: center;
            user-select: none;
            white-space: nowrap;
            width: 100%;
            word-break: break-all;
            margin-left: 0.2rem;
            padding-left: $switchHandleSize;
            padding-right: 0;
        }

        &::before {
            content: '';
            background-color: var(--vs-switch-falseHandleColor, var(--vs-primary-comp-bg));
            border-radius: 50%;
            height: $switchHandleSize;
            left: $switchGap;
            width: $switchHandleSize;
            position: absolute;
            transition: 0.3s;
        }
    }

    .vs-switch-input {
        position: absolute;
        opacity: 0;
        top: 0;
        left: 0;
        pointer-events: none;
    }

    &.vs-checked {
        .vs-switch-button {
            background-color: var(--vs-switch-trueBackgroundColor, var(--vs-primary-comp-bg));
            border: var(--vs-switch-trueBorder, 1px solid var(--vs-primary-comp-bg));
            color: var(--vs-switch-trueFontColor, var(--vs-primary-comp-font));

            &::before {
                left: calc(100% - ($switchHandleSize + $switchGap));
                background-color: var(--vs-switch-trueHandleColor, var(--vs-primary-comp-font));
            }

            .vs-status-label {
                padding-left: 0;
                padding-right: $switchHandleSize;
            }
        }
    }

    &.vs-dense {
        height: var(--vs-input-comp-height-dense);

        .vs-switch-button {
            height: var(--vs-switch-height, $switchHeightDense);
            padding: 0 0.6rem;
            border-radius: var(--vs-switch-borderRadius, calc($switchHeightDense / 2));
            font-size: var(--vs-switch-fontSize, var(--vs-font-size-xs));

            .vs-status-label {
                position: relative;
                top: 0.1rem;
                margin-left: 0.2rem;
                padding-left: $switchHandleSizeDense;
            }

            &::before {
                height: $switchHandleSizeDense;
                left: $switchGap;
                width: $switchHandleSizeDense;
            }
        }

        &.vs-checked {
            .vs-switch-button {
                &::before {
                    left: calc(100% - ($switchHandleSizeDense + $switchGap));
                }

                .vs-status-label {
                    padding-left: 0;
                    padding-right: $switchHandleSizeDense;
                }
            }
        }
    }

    &:focus-within {
        .vs-switch-button {
            @include focus-outline;
        }
    }

    &.vs-disabled {
        @include disabled;
    }

    &.vs-readonly {
        @include readonly;
    }
}
